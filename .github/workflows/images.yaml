name: Build and Release Images

on:
  pull_request:
    branches: ['main']
  push:
    branches: ['main']
    tags: ['v[0-9]+.[0-9]+.[0-9]+*']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Get version information for releases
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-release: ${{ steps.get-version.outputs.is-release }}
    steps:
    - uses: actions/checkout@v4
    - name: Get Version
      id: get-version
      uses: actions/github-script@v7
      with:
        script: |
          const { version } = require('./package.json');
          const tag = process.env.GITHUB_REF;
          const isRelease = tag && tag.startsWith('refs/tags/v');
          
          core.setOutput('version', version || '1.24.0');
          core.setOutput('is-release', isRelease);

  # Security scanning and code quality checks
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and test images
  build-images:
    needs: [get-version, security-scan]
    concurrency:
      group: build-images-${{ matrix.image }}-${{ github.head_ref || github.sha }}
      cancel-in-progress: true
    permissions:
      contents: read
      id-token: write
      packages: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
        - executor
        - executor-debug
        - executor-slim
        - warmer

        include:
        - image: executor
          target: kaniko-executor
          platforms: linux/amd64,linux/arm64,linux/s390x,linux/ppc64le
          gcr-image-name: gcr.io/kaniko-project/executor
          ghcr-image-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/executor
          tag: ${{ github.sha }}
          release-tag: latest

        - image: executor-debug
          target: kaniko-debug
          platforms: linux/amd64,linux/arm64,linux/s390x
          gcr-image-name: gcr.io/kaniko-project/executor
          ghcr-image-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/executor
          tag: ${{ github.sha }}-debug
          release-tag: debug

        - image: executor-slim
          target: kaniko-slim
          platforms: linux/amd64,linux/arm64,linux/s390x,linux/ppc64le
          gcr-image-name: gcr.io/kaniko-project/executor
          ghcr-image-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/executor
          tag: ${{ github.sha }}-slim
          release-tag: slim

        - image: warmer
          target: kaniko-warmer
          platforms: linux/amd64,linux/arm64,linux/s390x,linux/ppc64le
          gcr-image-name: gcr.io/kaniko-project/warmer
          ghcr-image-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/warmer
          tag: ${{ github.sha }}
          release-tag: latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: v1.60
        args: --timeout=5m

    - name: Run tests
      run: |
        make test
        make integration-test-run

    # Setup auth for GCR if not a PR
    - if: github.event_name != 'pull_request'
      name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCR_DEVOPS_SERVICE_ACCOUNT_KEY }}'
        create_credentials_file: true

    - if: github.event_name != 'pull_request'
      name: Set up gcloud
      uses: google-github-actions/setup-gcloud@v2

    - if: github.event_name != 'pull_request'
      name: Configure Docker for GCR
      run: gcloud auth configure-docker

    # Setup auth for GHCR
    - name: Authenticate to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Don't build for all platforms on PRs
    - id: platforms
      run: |
        event="${{ github.event_name }}"
        if [[ "$event" == "pull_request" ]]; then
          echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
        else
          platforms="${{ matrix.platforms }}"
          echo "platforms=${platforms}" >> $GITHUB_OUTPUT
        fi

    # Build and push images
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ matrix.platforms }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push to GCR
      if: github.event_name != 'pull_request'
      id: build-and-push-gcr
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/Dockerfile
        platforms: ${{ steps.platforms.outputs.platforms }}
        push: true
        tags: |
          ${{ matrix.gcr-image-name }}:${{ matrix.tag }}
          ${{ matrix.gcr-image-name }}:${{ needs.get-version.outputs.version }}
        no-cache-filters: certs
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: ${{ matrix.target }}

    - name: Build and push to GHCR
      if: github.event_name != 'pull_request'
      id: build-and-push-ghcr
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/Dockerfile
        platforms: ${{ steps.platforms.outputs.platforms }}
        push: true
        tags: |
          ${{ matrix.ghcr-image-name }}:${{ matrix.tag }}
          ${{ matrix.ghcr-image-name }}:${{ needs.get-version.outputs.version }}
        no-cache-filters: certs
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: ${{ matrix.target }}

    # Generate SBOM
    - if: github.event_name != 'pull_request'
      name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ matrix.ghcr-image-name }}@${{ steps.build-and-push-ghcr.outputs.digest }}
    - if: github.event_name != 'pull_request'
      name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ matrix.image }}
        path: |
          **/*.spdx
          **/*.cyclonedx.json

    # Sign images
    - if: github.event_name != 'pull_request'
      name: Install cosign
      uses: sigstore/cosign-installer@v3

    - if: github.event_name != 'pull_request'
      name: Sign GCR images
      run: |
        cosign sign --yes \
            --key gcpkms://projects/kaniko-project/locations/global/keyRings/cosign/cryptoKeys/cosign \
            ${{ matrix.gcr-image-name }}@${{ steps.build-and-push-gcr.outputs.digest }}
        cosign sign --yes \
            ${{ matrix.gcr-image-name }}@${{ steps.build-and-push-gcr.outputs.digest }}

    - if: github.event_name != 'pull_request'
      name: Sign GHCR images
      run: |
        cosign sign --yes \
            ${{ matrix.ghcr-image-name }}@${{ steps.build-and-push-ghcr.outputs.digest }}

    # Apply release tags for tagged releases
    - if: startsWith(github.ref, 'refs/tags/v') && github.event_name != 'pull_request'
      name: Setup crane
      uses: imjasonh/setup-crane@v0.4

    - if: startsWith(github.ref, 'refs/tags/v') && github.event_name != 'pull_request'
      name: Apply additional release tags
      run: |
        tag=${GITHUB_REF/refs\/tags\//}
        version=${{ needs.get-version.outputs.version }}

        # Apply tags to GCR images
        crane cp ${{ matrix.gcr-image-name }}@${{ steps.build-and-push-gcr.outputs.digest }} \
            ${{ matrix.gcr-image-name }}:${{ matrix.release-tag }}
        
        if [[ "${{ matrix.release-tag }}" == "latest" ]]; then
          crane cp ${{ matrix.gcr-image-name }}@${{ steps.build-and-push-gcr.outputs.digest }} \
              ${{ matrix.gcr-image-name }}:${version}
        else
          crane cp ${{ matrix.gcr-image-name }}@${{ steps.build-and-push-gcr.outputs.digest }} \
              ${{ matrix.gcr-image-name }}:${version}-${{ matrix.release-tag }}
        fi

        # Apply tags to GHCR images
        crane cp ${{ matrix.ghcr-image-name }}@${{ steps.build-and-push-ghcr.outputs.digest }} \
            ${{ matrix.ghcr-image-name }}:${{ matrix.release-tag }}
        
        if [[ "${{ matrix.release-tag }}" == "latest" ]]; then
          crane cp ${{ matrix.ghcr-image-name }}@${{ steps.build-and-push-ghcr.outputs.digest }} \
              ${{ matrix.ghcr-image-name }}:${version}
        else
          crane cp ${{ matrix.ghcr-image-name }}@${{ steps.build-and-push-ghcr.outputs.digest }} \
              ${{ matrix.ghcr-image-name }}:${version}-${{ matrix.release-tag }}
        fi

  # Create release for tagged versions
  create-release:
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name != 'pull_request'
    needs: [get-version, build-images]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ needs.get-version.outputs.version }}
        body: |
          ## Changes in Release ${{ needs.get-version.outputs.version }}
          
          This release includes:
          - Multi-platform builds for ${{ matrix.platforms }}
          - Security scanning results
          - SBOM (Software Bill of Materials) included
          - Code quality checks passed
          
          ### Images
          - **Executor**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/executor:${{ needs.get-version.outputs.version }}`
          - **Warmer**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/warmer:${{ needs.get-version.outputs.version }}`
          
          ### Artifacts
          - SBOM files available in workflow artifacts
          - Container images signed with cosign
        files: |
          **/*.spdx
          **/*.cyclonedx.json
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}